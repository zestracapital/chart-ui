# Zestra Capital Chart UI - Modular Source Code

Modular source code for the Zestra Capital Economic Analytics Chart UI. This structure breaks down the original 1500+ line monolithic file into smaller, maintainable modules for easier AI-assisted development and maintenance.

## Project Structure

```
chart-ui/
├── package.json          # NPM dependencies
├── webpack.config.js     # Build configuration  
├── src/
│   ├── index.js          # Entry point
│   ├── modules/
│   │   ├── Dashboard.js         # Core class (~400 lines)
│   │   ├── DataFetcher.js       # API calls (~150 lines)
│   │   ├── ChartRenderer.js     # Chart.js integration (~160 lines)
│   │   ├── UIControls.js        # Event handlers (~90 lines)
│   │   ├── DashboardManager.js  # Global management (~130 lines)
│   │   └── utils.js             # Helper functions (~200 lines)
│   └── styles/
│       └── dashboard.css        # All styles (~300 lines)
└── dist/                 # Build output
    ├── zestra-dashboard.js
    └── zestra-dashboard.css
```

## Quick Start

```bash
# Install dependencies
npm install

# Build for production
npm run build

# Development with watch mode
npm run dev
```

## Using in WordPress Plugin

1. **Build the project:**
   ```bash
   npm run build
   ```

2. **Copy files to plugin:**
   - Copy `dist/zestra-dashboard.js` to your plugin's `assets/js/` folder
   - Copy `dist/zestra-dashboard.css` to your plugin's `assets/css/` folder

3. **No plugin code changes needed!**
   - The API is 100% backward compatible
   - Same initialization method: `window.ZestraDashboard.init(containerId)`
   - All existing functionality preserved

## Module Details

### 1. **Dashboard.js** (Core Class)
- Main dashboard class with all initialization logic
- Manages state, data, and chart instances
- Handles data fetching and rendering
- Coordinates all other modules

### 2. **DataFetcher.js** (WordPress Integration)
- WordPress AJAX API calls
- Search functionality for economic indicators
- Data loading and error handling
- Supports both WordPress and standalone usage

### 3. **ChartRenderer.js** (Visualization)
- Chart.js integration for rendering charts
- Theme support (light/dark)
- Chart type switching (line/bar)
- Historical stats calculation
- Updates visual elements

### 4. **UIControls.js** (Event Handlers)
- Binds all UI event listeners
- Theme toggle functionality
- Search panel handling
- Chart type and timeframe controls
- Comparison modal management

### 5. **DashboardManager.js** (Global Management)
- Singleton pattern for dashboard instances
- Global initialization function
- Instance lifecycle management
- Exposes API to `window.ZestraDashboard`

### 6. **utils.js** (Helper Functions)
- DOM query helpers (`qs`, `qsa`)
- Date formatting utilities
- Data filtering by timeframe
- Percentage calculations
- Theme color management

### 7. **dashboard.css** (Styles)
- Complete dashboard styling
- Light and dark theme support
- Responsive design
- Chart container styles
- Modal and sidebar styles

## Benefits of This Structure

✅ **Easier Maintenance**: Each module has a single responsibility
✅ **AI-Friendly**: Files under 500 lines are easier for AI to edit
✅ **Modular**: Add/remove features without touching other code
✅ **Testable**: Each module can be tested independently
✅ **Scalable**: Easy to add new indicators or features
✅ **100% Compatible**: Drop-in replacement for original code

## Build Process

The build process uses Webpack to:
1. Bundle all JavaScript modules into one file
2. Extract and minify CSS into separate file
3. Output to `dist/` folder with names:
   - `zestra-dashboard.js`
   - `zestra-dashboard.css`

## API Usage

### Initialize Dashboard
```javascript
// Basic initialization
window.ZestraDashboard.init('dashboard-container-id');

// With options
window.ZestraDashboard.init('dashboard-container-id', {
  // optional configuration
});
```

### Get Dashboard Instance
```javascript
const dashboard = window.ZestraDashboard.getInstance(container);
```

### Destroy Dashboard
```javascript
window.ZestraDashboard.destroy('dashboard-container-id');
```

## Development Workflow

1. **Make changes** to any module file
2. **Test locally** using `npm run dev`
3. **Build for production** using `npm run build`
4. **Copy files** from `dist/` to plugin
5. **Test in WordPress** environment

## Adding New Features

To add a new feature:
1. Identify the relevant module (or create a new one)
2. Make changes keeping files under 500 lines
3. Update imports in `index.js` if needed
4. Rebuild and test

## Troubleshooting

**Build errors:**
- Ensure all dependencies are installed: `npm install`
- Check Node.js version (v14+ recommended)

**Module not found:**
- Verify all imports use correct paths
- Check file extensions (.js for modules)

**Chart not rendering:**
- Ensure Chart.js is included
- Check console for errors
- Verify container ID matches

## File Size Comparison

| Original | Modular | Reduction |
|----------|---------|----------|
| 1 file, 1500+ lines | 7 files, avg 180 lines | 88% per file |

## Dependencies

- Chart.js (for charting)
- chartjs-adapter-date-fns (for time scales)
- Webpack (for bundling)
- CSS Loader & Mini CSS Extract Plugin (for styles)

## License

Same as parent WordPress plugin.

## Support

For issues or questions about this modular structure, please refer to the main plugin repository.
